@x
Packaging Python Projects
=========================
@y
Python プロジェクトのパッケージング
====================================
@z

@x
This tutorial walks you through how to package a simple Python project. It will
show you how to add the necessary files and structure to create the package, how
to build the package, and how to upload it to the Python Package Index.
@y
本チュートリアルでは、単純な Python プロジェクトをパッケージングする方法について説明します。
この中では、パッケージの生成に必要となるファイルや構成を作り出した上で、パッケージのビルド方法、また Python パッケージインデックスへのアップロード方法について示します。
@z

@x
A simple project
----------------
@y
単純なプロジェクト
------------------
@z

@x
This tutorial uses a simple project named ``example_pkg``. If you are unfamiliar
with Python's modules and :term:`import packages <Import Package>`, take a few
minutes to read over the `Python documentation for packages and modules`_. Even
if you already have a project that you want to package up, we recommend
following this tutorial as-is using this example package and then trying with
your own package.
@y
本チュートリアルでは ``example_pkg`` という単純なプロジェクトを用いることにします。
If you are unfamiliar
with Python's modules and :term:`import packages <Import Package>`, take a few
minutes to read over the `Python documentation for packages and modules`_. Even
if you already have a project that you want to package up, we recommend
following this tutorial as-is using this example package and then trying with
your own package.
@z

@x
To create this project locally, create the following file structure:
@y
ローカル環境においてこのプロジェクトを生成するには、以下のファイル構造を作ります。
@z

@x
.. code-block:: text

    packaging_tutorial
    └── example_pkg
        └── __init__.py
@y
.. code-block:: text

    packaging_tutorial
    └── example_pkg
        └── __init__.py
@z

@x
Once you create this structure, you'll want to run all of the commands in this
tutorial within the top-level folder - so be sure to ``cd packaging_tutorial``.
@y
このファイル構造を作ったら、トップフォルダーにおいて本チュートリアルのあらゆるコマンドを実行したくなります。
その際には ``cd packaging_tutorial`` を行うことを忘れないでください。
@z

@x
:file:`example_pkg/__init__.py` is required to import the directory as a package,
and can simply be an empty file.
@y
:file:`example_pkg/__init__.py` はこのディレクトリをパッケージとしてインポートするために必要となります。
単純に空のファイルとするのでもかまいません。
@z

@x
.. _Python documentation for packages and modules:
    https://docs.python.org/3/tutorial/modules.html#packages
@y
.. _Python documentation for packages and modules:
    https://docs.python.org/3/tutorial/modules.html#packages
@z

@x
Creating the package files
--------------------------
@y
パッケージファイルの生成
------------------------
@z

@x
You will now create a handful of files to package up this project and prepare it
for distribution. Create the new files listed below and place them in the
project's root directory - you will add content to them in the following steps.
@y
このプロジェクトをパッケージ化して配布可能とするために、いくつかファイルを作っていきます。
以下に示すファイルを新たに生成して、このプロジェクトのルートディレクトリに置いてください。
各ファイルの内容については、以下に示す手順を通じて定めていきます。
@z

@x
.. code-block:: text
@y
.. code-block:: text
@z

@x
    packaging_tutorial
    ├── LICENSE
    ├── README.md
    ├── example_pkg
    │   └── __init__.py
    ├── pyproject.toml
    ├── setup.cfg
    ├── setup.py
    └── tests
@y
    packaging_tutorial
    ├── LICENSE
    ├── README.md
    ├── example_pkg
    │   └── __init__.py
    ├── pyproject.toml
    ├── setup.cfg
    ├── setup.py
    └── tests
@z

@x
Creating a test folder
----------------------
@y
テストフォルダーの生成
----------------------
@z

@x
:file:`tests/` is a placeholder for unit test files. Leave it empty for now.
@y
:file:`tests/` はユニットテスト用のファイルを配置するところです。
今は空のままにしておきます。
@z

@x
Creating pyproject.toml
-----------------------
@y
Creating pyproject.toml
-----------------------
@z

@x
:file:`pyproject.toml` is the file that tells build tools (like ``pip`` 10+ and
``build``) what system you are using and what it required for building. The
default if this file is missing is to assume a classic setuptools build system,
but it is better to be explicit; if you have a :file:`pyproject.toml` file, you
will be able to rely on ``wheel`` and other packages being present.
@y
:file:`pyproject.toml` is the file that tells build tools (like ``pip`` 10+ and
``build``) what system you are using and what it required for building. The
default if this file is missing is to assume a classic setuptools build system,
but it is better to be explicit; if you have a :file:`pyproject.toml` file, you
will be able to rely on ``wheel`` and other packages being present.
@z

@x
This file should be ideal for most setuptools projects:
@y
This file should be ideal for most setuptools projects:
@z

@x
.. code-block:: toml

    [build-system]
    requires = [
        "setuptools>=42",
        "wheel"
    ]
    build-backend = "setuptools.build_meta"
@y
.. code-block:: toml

    [build-system]
    requires = [
        "setuptools>=42",
        "wheel"
    ]
    build-backend = "setuptools.build_meta"
@z

@x
``build-system.requires`` gives a list of packages that are needed to build your
package. Listing something here will *only* make it available during the build,
not after it is installed.
@y
``build-system.requires`` gives a list of packages that are needed to build your
package. Listing something here will *only* make it available during the build,
not after it is installed.
@z

@x
``build-system.build-backend`` is technically optional, but you will get
``setuptools.build_meta:__legacy__`` instead if you forget to include it, so
always include it. If you were to use a different build system, such as
:ref:`flit` or `poetry`_, those would go here, and the configuration details
would be completely different than the setuptools configuration described
below. See :pep:`517` and :pep:`518` for background and details.
@y
``build-system.build-backend`` is technically optional, but you will get
``setuptools.build_meta:__legacy__`` instead if you forget to include it, so
always include it. If you were to use a different build system, such as
:ref:`flit` or `poetry`_, those would go here, and the configuration details
would be completely different than the setuptools configuration described
below. See :pep:`517` and :pep:`518` for background and details.
@z

@x
Configuring metadata
--------------------
@y
Configuring metadata
--------------------
@z

@x
There are two types of metadata: static and dynamic.
@y
There are two types of metadata: static and dynamic.
@z

@x
* Static metadata (:file:`setup.cfg`): guaranteed to be the same every time. This is
  simpler, easier to read, and avoids many common errors, like encoding errors.
* Dynamic metadata (:file:`setup.py`): possibly non-deterministic. Any items that are
  dynamic or determined at install-time, as well as extension modules or
  extensions to setuptools, need to go into :file:`setup.py`.
@y
* Static metadata (:file:`setup.cfg`): guaranteed to be the same every time. This is
  simpler, easier to read, and avoids many common errors, like encoding errors.
* Dynamic metadata (:file:`setup.py`): possibly non-deterministic. Any items that are
  dynamic or determined at install-time, as well as extension modules or
  extensions to setuptools, need to go into :file:`setup.py`.
@z

@x
Static metadata should be preferred and dynamic metadata should be used only as
an escape hatch when absolutely necessary.
@y
Static metadata should be preferred and dynamic metadata should be used only as
an escape hatch when absolutely necessary.
@z

@x
.. tab:: setup.cfg (static)
@y
.. tab:: setup.cfg (static)
@z

@x
    :file:`setup.cfg` is the configuration file for :ref:`setuptools`. It tells
    setuptools about your package (such as the name and version) as well as which
    code files to include. Eventually much of this configuration may be able to move
    to :file:`pyproject.toml`.
@y
    :file:`setup.cfg` is the configuration file for :ref:`setuptools`. It tells
    setuptools about your package (such as the name and version) as well as which
    code files to include. Eventually much of this configuration may be able to move
    to :file:`pyproject.toml`.
@z

@x
    Open :file:`setup.cfg` and enter the following content. Update the package name
    to include your username (for example, ``example-pkg-theacodes``), this ensures
    that you have a unique package name and that your package doesn't conflict with
    packages uploaded by other people following this tutorial.
@y
    Open :file:`setup.cfg` and enter the following content. Update the package name
    to include your username (for example, ``example-pkg-theacodes``), this ensures
    that you have a unique package name and that your package doesn't conflict with
    packages uploaded by other people following this tutorial.
@z

@x
    .. code-block:: python

        [metadata]
        # replace with your username:
        name = example-pkg-YOUR-USERNAME-HERE
        version = 0.0.1
        author = Example Author
        author_email = author@example.com
        description = A small example package
        long_description = file: README.md
        long_description_content_type = text/markdown
        url = https://github.com/pypa/sampleproject
        project_urls =
            Bug Tracker = https://github.com/pypa/sampleproject/issues
        classifiers =
            Programming Language :: Python :: 3
            License :: OSI Approved :: MIT License
            Operating System :: OS Independent

        [options]
        packages = find:
        python_requires = >=3.6
@y
    .. code-block:: python

        [metadata]
        # replace with your username:
        name = example-pkg-YOUR-USERNAME-HERE
        version = 0.0.1
        author = Example Author
        author_email = author@example.com
        description = A small example package
        long_description = file: README.md
        long_description_content_type = text/markdown
        url = https://github.com/pypa/sampleproject
        project_urls =
            Bug Tracker = https://github.com/pypa/sampleproject/issues
        classifiers =
            Programming Language :: Python :: 3
            License :: OSI Approved :: MIT License
            Operating System :: OS Independent

        [options]
        packages = find:
        python_requires = >=3.6
@z

@x
    There are a `variety of metadata and options
    <https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html>`_
    supported here. This is in configparser format; do not place quotes around values.
    This example package uses a relatively minimal set of metadata:
@y
    There are a `variety of metadata and options
    <https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html>`_
    supported here. This is in configparser format; do not place quotes around values.
    This example package uses a relatively minimal set of metadata:
@z

@x
    - ``name`` is the *distribution name* of your package. This can be any name as
      long as only contains letters, numbers, ``_`` , and ``-``. It also must not
      already be taken on pypi.org. **Be sure to update this with your username,**
      as this ensures you won't try to upload a package with the same name as one
      which already exists when you upload the package.
    - ``version`` is the package version see :pep:`440` for more details on
      versions. You can use ``file:`` or ``attr:`` directives to read from a file or
      package attribute (simple attributes do not require import).
    - ``author`` and ``author_email`` are used to identify the author of the
      package.
    - ``description`` is a short, one-sentence summary of the package.
    - ``long_description`` is a detailed description of the package. This is
      shown on the package detail page on the Python Package Index. In
      this case, the long description is loaded from :file:`README.md` which is
      a common pattern, using the ``file:`` directive.
    - ``long_description_content_type`` tells the index what type of markup is
      used for the long description. In this case, it's Markdown.
    - ``url`` is the URL for the homepage of the project. For many projects, this
      will just be a link to GitHub, GitLab, Bitbucket, or similar code hosting
      service.
    - ``project_urls`` lets you list any number of extra links to show on PyPI.
      Generally this could be to documentation, issue trackers, etc.
    - ``classifiers`` gives the index and :ref:`pip` some additional metadata
      about your package. In this case, the package is only compatible with Python
      3, is licensed under the MIT license, and is OS-independent. You should
      always include at least which version(s) of Python your package works on,
      which license your package is available under, and which operating systems
      your package will work on. For a complete list of classifiers, see
      https://pypi.org/classifiers/.
@y
    - ``name`` is the *distribution name* of your package. This can be any name as
      long as only contains letters, numbers, ``_`` , and ``-``. It also must not
      already be taken on pypi.org. **Be sure to update this with your username,**
      as this ensures you won't try to upload a package with the same name as one
      which already exists when you upload the package.
    - ``version`` is the package version see :pep:`440` for more details on
      versions. You can use ``file:`` or ``attr:`` directives to read from a file or
      package attribute (simple attributes do not require import).
    - ``author`` and ``author_email`` are used to identify the author of the
      package.
    - ``description`` is a short, one-sentence summary of the package.
    - ``long_description`` is a detailed description of the package. This is
      shown on the package detail page on the Python Package Index. In
      this case, the long description is loaded from :file:`README.md` which is
      a common pattern, using the ``file:`` directive.
    - ``long_description_content_type`` tells the index what type of markup is
      used for the long description. In this case, it's Markdown.
    - ``url`` is the URL for the homepage of the project. For many projects, this
      will just be a link to GitHub, GitLab, Bitbucket, or similar code hosting
      service.
    - ``project_urls`` lets you list any number of extra links to show on PyPI.
      Generally this could be to documentation, issue trackers, etc.
    - ``classifiers`` gives the index and :ref:`pip` some additional metadata
      about your package. In this case, the package is only compatible with Python
      3, is licensed under the MIT license, and is OS-independent. You should
      always include at least which version(s) of Python your package works on,
      which license your package is available under, and which operating systems
      your package will work on. For a complete list of classifiers, see
      https://pypi.org/classifiers/.
@z

@x
    In the options category, we have controls for setuptools itself:
@y
    In the options category, we have controls for setuptools itself:
@z

@x
    - ``packages`` is a list of all Python :term:`import packages <Import
      Package>` that should be included in the :term:`Distribution Package`.
      Instead of listing each package manually, we can use the ``find:`` directive
      to automatically discover all packages and subpackages. In this case, the
      list of packages will be ``example_pkg`` as that's the only package present.
    - ``python_requires`` gives the versions of Python supported by your
      project. Installers like pip will look back though older versions of
      packages until it finds one that has a matching Python version.
@y
    - ``packages`` is a list of all Python :term:`import packages <Import
      Package>` that should be included in the :term:`Distribution Package`.
      Instead of listing each package manually, we can use the ``find:`` directive
      to automatically discover all packages and subpackages. In this case, the
      list of packages will be ``example_pkg`` as that's the only package present.
    - ``python_requires`` gives the versions of Python supported by your
      project. Installers like pip will look back though older versions of
      packages until it finds one that has a matching Python version.
@z

@x
    There are many more than the ones mentioned here. See
    :doc:`/guides/distributing-packages-using-setuptools` for more details.
@y
    There are many more than the ones mentioned here. See
    :doc:`/guides/distributing-packages-using-setuptools` for more details.
@z

@x
    If you create a :file:`setup.py` file, this will enable direct interaction
    with :file:`setup.py` (which generally should be avoided), and editable
    installs. This file used to be required, but can be omitted in modern
    setuptools. If you include the file, you must have a call to
    :func:`setup()` in it:
@y
    If you create a :file:`setup.py` file, this will enable direct interaction
    with :file:`setup.py` (which generally should be avoided), and editable
    installs. This file used to be required, but can be omitted in modern
    setuptools. If you include the file, you must have a call to
    :func:`setup()` in it:
@z

@x
    .. code-block:: python

        import setuptools

        setuptools.setup()
@y
    .. code-block:: python

        import setuptools

        setuptools.setup()
@z

@x
    Anything you set in :file:`setup.cfg` can instead be set via keyword argument to
    :func:`setup()`; this enables computed values to be used. You will also need
    :func:`setup()` for setting up extension modules for compilation.
@y
    Anything you set in :file:`setup.cfg` can instead be set via keyword argument to
    :func:`setup()`; this enables computed values to be used. You will also need
    :func:`setup()` for setting up extension modules for compilation.
@z

@x
.. tab:: setup.py (dynamic)
@y
.. tab:: setup.py (dynamic)
@z

@x
    :file:`setup.py` is the build script for :ref:`setuptools`. It tells setuptools
    about your package (such as the name and version) as well as which code files
    to include.
@y
    :file:`setup.py` is the build script for :ref:`setuptools`. It tells setuptools
    about your package (such as the name and version) as well as which code files
    to include.
@z

@x
    Open :file:`setup.py` and enter the following content. Update the package name
    to include your username (for example, ``example-pkg-theacodes``), this ensures
    that you have a unique package name and that your package doesn't conflict with
    packages uploaded by other people following this tutorial.
@y
    Open :file:`setup.py` and enter the following content. Update the package name
    to include your username (for example, ``example-pkg-theacodes``), this ensures
    that you have a unique package name and that your package doesn't conflict with
    packages uploaded by other people following this tutorial.
@z

@x
    .. code-block:: python

        import setuptools

        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()

        setuptools.setup(
            name="example-pkg-YOUR-USERNAME-HERE", # Replace with your own username
            version="0.0.1",
            author="Example Author",
            author_email="author@example.com",
            description="A small example package",
            long_description=long_description,
            long_description_content_type="text/markdown",
            url="https://github.com/pypa/sampleproject",
            project_urls={
                "Bug Tracker": "https://github.com/pypa/sampleproject/issues",
            },
            classifiers=[
                "Programming Language :: Python :: 3",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
            ],
            packages=setuptools.find_packages(),
            python_requires=">=3.6",
        )
@y
    .. code-block:: python

        import setuptools

        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()

        setuptools.setup(
            name="example-pkg-YOUR-USERNAME-HERE", # Replace with your own username
            version="0.0.1",
            author="Example Author",
            author_email="author@example.com",
            description="A small example package",
            long_description=long_description,
            long_description_content_type="text/markdown",
            url="https://github.com/pypa/sampleproject",
            project_urls={
                "Bug Tracker": "https://github.com/pypa/sampleproject/issues",
            },
            classifiers=[
                "Programming Language :: Python :: 3",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
            ],
            packages=setuptools.find_packages(),
            python_requires=">=3.6",
        )
@z

@x
    :func:`setup` takes several arguments. This example package uses a relatively
    minimal set:
@y
    :func:`setup` takes several arguments. This example package uses a relatively
    minimal set:
@z

@x
    - ``name`` is the *distribution name* of your package. This can be any name as
      long as only contains letters, numbers, ``_`` , and ``-``. It also must not
      already be taken on pypi.org. **Be sure to update this with your username,**
      as this ensures you won't try to upload a package with the same name as one
      which already exists when you upload the package.
    - ``version`` is the package version see :pep:`440` for more details on
      versions.
    - ``author`` and ``author_email`` are used to identify the author of the
      package.
    - ``description`` is a short, one-sentence summary of the package.
    - ``long_description`` is a detailed description of the package. This is
      shown on the package detail page on the Python Package Index. In
      this case, the long description is loaded from :file:`README.md` which is
      a common pattern.
    - ``long_description_content_type`` tells the index what type of markup is
      used for the long description. In this case, it's Markdown.
    - ``url`` is the URL for the homepage of the project. For many projects, this
      will just be a link to GitHub, GitLab, Bitbucket, or similar code hosting
      service.
    - ``project_urls`` lets you list any number of extra links to show on PyPI.
      Generally this could be to documentation, issue trackers, etc.
    - ``classifiers`` gives the index and :ref:`pip` some additional metadata
      about your package. In this case, the package is only compatible with Python
      3, is licensed under the MIT license, and is OS-independent. You should
      always include at least which version(s) of Python your package works on,
      which license your package is available under, and which operating systems
      your package will work on. For a complete list of classifiers, see
      https://pypi.org/classifiers/.
    - ``packages`` is a list of all Python :term:`import packages <Import
      Package>` that should be included in the :term:`Distribution Package`.
      Instead of listing each package manually, we can use :func:`find_packages`
      to automatically discover all packages and subpackages. In this case, the
      list of packages will be ``example_pkg`` as that's the only package present.
    - ``python_requires`` gives the versions of Python supported by your
      project. Installers like pip will look back though older versions of
      packages until it finds one that has a matching Python version.
@y
    - ``name`` is the *distribution name* of your package. This can be any name as
      long as only contains letters, numbers, ``_`` , and ``-``. It also must not
      already be taken on pypi.org. **Be sure to update this with your username,**
      as this ensures you won't try to upload a package with the same name as one
      which already exists when you upload the package.
    - ``version`` is the package version see :pep:`440` for more details on
      versions.
    - ``author`` and ``author_email`` are used to identify the author of the
      package.
    - ``description`` is a short, one-sentence summary of the package.
    - ``long_description`` is a detailed description of the package. This is
      shown on the package detail page on the Python Package Index. In
      this case, the long description is loaded from :file:`README.md` which is
      a common pattern.
    - ``long_description_content_type`` tells the index what type of markup is
      used for the long description. In this case, it's Markdown.
    - ``url`` is the URL for the homepage of the project. For many projects, this
      will just be a link to GitHub, GitLab, Bitbucket, or similar code hosting
      service.
    - ``project_urls`` lets you list any number of extra links to show on PyPI.
      Generally this could be to documentation, issue trackers, etc.
    - ``classifiers`` gives the index and :ref:`pip` some additional metadata
      about your package. In this case, the package is only compatible with Python
      3, is licensed under the MIT license, and is OS-independent. You should
      always include at least which version(s) of Python your package works on,
      which license your package is available under, and which operating systems
      your package will work on. For a complete list of classifiers, see
      https://pypi.org/classifiers/.
    - ``packages`` is a list of all Python :term:`import packages <Import
      Package>` that should be included in the :term:`Distribution Package`.
      Instead of listing each package manually, we can use :func:`find_packages`
      to automatically discover all packages and subpackages. In this case, the
      list of packages will be ``example_pkg`` as that's the only package present.
    - ``python_requires`` gives the versions of Python supported by your
      project. Installers like pip will look back though older versions of
      packages until it finds one that has a matching Python version.
@z

@x
    There are many more than the ones mentioned here. See
    :doc:`/guides/distributing-packages-using-setuptools` for more details.
@y
    There are many more than the ones mentioned here. See
    :doc:`/guides/distributing-packages-using-setuptools` for more details.
@z

@x
Creating README.md
------------------
@y
README.md の生成
----------------
@z

@x
Open :file:`README.md` and enter the following content. You can customize this
if you'd like.
@y
Open :file:`README.md` and enter the following content. You can customize this
if you'd like.
@z
	
@x
.. code-block:: md
@y
.. code-block:: md
@z

@x
    # Example Package
@y
    # Example Package
@z

@x
    This is a simple example package. You can use
    [Github-flavored Markdown](https://guides.github.com/features/mastering-markdown/)
    to write your content.
@y
    This is a simple example package. You can use
    [Github-flavored Markdown](https://guides.github.com/features/mastering-markdown/)
    to write your content.
@z

@x
Creating a LICENSE
------------------
@y
LICENSE の生成
--------------
@z

@x
It's important for every package uploaded to the Python Package Index to include
a license. This tells users who install your package the terms under which they
can use your package. For help picking a license, see
https://choosealicense.com/. Once you have chosen a license, open
:file:`LICENSE` and enter the license text. For example, if you had chosen the
MIT license:
@y
It's important for every package uploaded to the Python Package Index to include
a license. This tells users who install your package the terms under which they
can use your package. For help picking a license, see
https://choosealicense.com/. Once you have chosen a license, open
:file:`LICENSE` and enter the license text. For example, if you had chosen the
MIT license:
@z

@x
.. code-block:: text
@y
.. code-block:: text
@z

@x
    Copyright (c) 2018 The Python Packaging Authority
@y
    Copyright (c) 2018 The Python Packaging Authority
@z

@x
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
@y
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
@z

@x
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
@y
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
@z

@x
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
@y
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
@z

@x
.. _generating archives:
@y
.. _generating archives:
@z

@x
Generating distribution archives
--------------------------------
@y
配布アーカイブの生成
--------------------
@z

@x
The next step is to generate :term:`distribution packages <Distribution
Package>` for the package. These are archives that are uploaded to the Package
Index and can be installed by :ref:`pip`.
@y
次のステップは、パッケージに対する :term:`配布パッケージ <Distribution Package>` を生成することです。
これはパッケージインデックスにアップロードされるアーカイブであり、:ref:`pip` を使ってインストールできます。
@z

@x
Make sure you have the latest versions of PyPA's ``build`` installed:
@y
ここで PyPA の ``build`` の最新バージョンがインストールされていることを確認してください。
@z

@x
.. code-block:: bash

    python3 -m pip install --upgrade build
@y
.. code-block:: bash

    python3 -m pip install --upgrade build
@z

@x
.. tip:: If you have trouble installing these, see the
   :doc:`installing-packages` tutorial.
@y
.. tip:: インストールにおいてトラブルが発生したら、チュートリアルにある :doc:`installing-packages` を参照してください。
@z

@x
Now run this command from the same directory where :file:`pyproject.toml` is located:
@y
そこで :file:`pyproject.toml` があるディレクトリから以下のコマンドを実行します。
@z

@x
.. code-block:: bash

    python3 -m build
@y
.. code-block:: bash

    python3 -m build
@z

@x
This command should output a lot of text and once completed should generate two
files in the :file:`dist` directory:
@y
このコマンド実行から処理結果が多く出力され、最終的に :file:`dist` ディレクトリ内に 2 つのファイルが生成されます。
@z

@x
.. code-block:: text

    dist/
      example_pkg_YOUR_USERNAME_HERE-0.0.1-py3-none-any.whl
      example_pkg_YOUR_USERNAME_HERE-0.0.1.tar.gz
@y
.. code-block:: text

    dist/
      example_pkg_YOUR_USERNAME_HERE-0.0.1-py3-none-any.whl
      example_pkg_YOUR_USERNAME_HERE-0.0.1.tar.gz
@z

@x
.. note:: If you run into trouble here, please copy the output and file an issue
  over on `packaging problems`_ and we'll do our best to help you!
@y
.. note:: If you run into trouble here, please copy the output and file an issue
  over on `packaging problems`_ and we'll do our best to help you!
@z

@x
.. _packaging problems:
  https://github.com/pypa/packaging-problems/issues/new?title=Trouble+following+packaging+libraries+tutorial
@y
.. _packaging problems:
  https://github.com/pypa/packaging-problems/issues/new?title=Trouble+following+packaging+libraries+tutorial
@z

@x
The ``tar.gz`` file is a :term:`Source Archive` whereas the ``.whl`` file is a
:term:`Built Distribution`. Newer :ref:`pip` versions preferentially install
built distributions, but will fall back to source archives if needed. You
should always upload a source archive and provide built archives for the
platforms your project is compatible with. In this case, our example package is
compatible with Python on any platform so only one built distribution is needed.
@y
The ``tar.gz`` file is a :term:`Source Archive` whereas the ``.whl`` file is a
:term:`Built Distribution`. Newer :ref:`pip` versions preferentially install
built distributions, but will fall back to source archives if needed. You
should always upload a source archive and provide built archives for the
platforms your project is compatible with. In this case, our example package is
compatible with Python on any platform so only one built distribution is needed.
@z

@x
Uploading the distribution archives
-----------------------------------
@y
Uploading the distribution archives
-----------------------------------
@z

@x
Finally, it's time to upload your package to the Python Package Index!
@y
Finally, it's time to upload your package to the Python Package Index!
@z

@x
The first thing you'll need to do is register an account on ``Test PyPI``. Test
PyPI is a separate instance of the package index intended for testing and
experimentation. It's great for things like this tutorial where we don't
necessarily want to upload to the real index. To register an account, go to
https://test.pypi.org/account/register/ and complete the steps on that page.
You will also need to verify your email address before you're able to upload
any packages.  For more details on Test PyPI, see
:doc:`/guides/using-testpypi`.
@y
The first thing you'll need to do is register an account on ``Test PyPI``. Test
PyPI is a separate instance of the package index intended for testing and
experimentation. It's great for things like this tutorial where we don't
necessarily want to upload to the real index. To register an account, go to
https://test.pypi.org/account/register/ and complete the steps on that page.
You will also need to verify your email address before you're able to upload
any packages.  For more details on Test PyPI, see
:doc:`/guides/using-testpypi`.
@z

@x
Now you'll create a PyPI `API token`_ so you will be able to securely upload
your project.
@y
Now you'll create a PyPI `API token`_ so you will be able to securely upload
your project.
@z

@x
Go to https://test.pypi.org/manage/account/#api-tokens and create a new
`API token`_; don't limit its scope to a particular project, since you
are creating a new project.
@y
Go to https://test.pypi.org/manage/account/#api-tokens and create a new
`API token`_; don't limit its scope to a particular project, since you
are creating a new project.
@z

@x
**Don't close the page until you have copied and saved the token — you
won't see that token again.**
@y
**Don't close the page until you have copied and saved the token — you
won't see that token again.**
@z

@x
.. _API token: https://test.pypi.org/help/#apitoken
@y
.. _API token: https://test.pypi.org/help/#apitoken
@z

@x
Now that you are registered, you can use :ref:`twine` to upload the
distribution packages. You'll need to install Twine:
@y
Now that you are registered, you can use :ref:`twine` to upload the
distribution packages. You'll need to install Twine:
@z

@x
.. code-block:: bash
@y
.. code-block:: bash
@z

@x
    python3 -m pip install --user --upgrade twine
@y
    python3 -m pip install --user --upgrade twine
@z

@x
Once installed, run Twine to upload all of the archives under :file:`dist`:
@y
Once installed, run Twine to upload all of the archives under :file:`dist`:
@z

@x
.. code-block:: bash
@y
.. code-block:: bash
@z

@x
    python3 -m twine upload --repository testpypi dist/*
@y
    python3 -m twine upload --repository testpypi dist/*
@z

@x
You will be prompted for a username and password. For the username,
use ``__token__``. For the password, use the token value, including
the ``pypi-`` prefix.
@y
You will be prompted for a username and password. For the username,
use ``__token__``. For the password, use the token value, including
the ``pypi-`` prefix.
@z

@x
After the command completes, you should see output similar to this:
@y
After the command completes, you should see output similar to this:
@z

@x
.. code-block:: bash
@y
.. code-block:: bash
@z

@x
    Uploading distributions to https://test.pypi.org/legacy/
    Enter your username: [your username]
    Enter your password:
    Uploading example_pkg_YOUR_USERNAME_HERE-0.0.1-py3-none-any.whl
    100%|█████████████████████| 4.65k/4.65k [00:01<00:00, 2.88kB/s]
    Uploading example_pkg_YOUR_USERNAME_HERE-0.0.1.tar.gz
    100%|█████████████████████| 4.25k/4.25k [00:01<00:00, 3.05kB/s]
@y
    Uploading distributions to https://test.pypi.org/legacy/
    Enter your username: [your username]
    Enter your password:
    Uploading example_pkg_YOUR_USERNAME_HERE-0.0.1-py3-none-any.whl
    100%|█████████████████████| 4.65k/4.65k [00:01<00:00, 2.88kB/s]
    Uploading example_pkg_YOUR_USERNAME_HERE-0.0.1.tar.gz
    100%|█████████████████████| 4.25k/4.25k [00:01<00:00, 3.05kB/s]
@z

@x
Once uploaded your package should be viewable on TestPyPI, for example,
https://test.pypi.org/project/example-pkg-YOUR-USERNAME-HERE
@y
Once uploaded your package should be viewable on TestPyPI, for example,
https://test.pypi.org/project/example-pkg-YOUR-USERNAME-HERE
@z

@x
Installing your newly uploaded package
--------------------------------------
@y
Installing your newly uploaded package
--------------------------------------
@z

@x
You can use :ref:`pip` to install your package and verify that it works.
Create a new :ref:`virtualenv` (see :doc:`/tutorials/installing-packages` for
detailed instructions) and install your package from TestPyPI:
@y
You can use :ref:`pip` to install your package and verify that it works.
Create a new :ref:`virtualenv` (see :doc:`/tutorials/installing-packages` for
detailed instructions) and install your package from TestPyPI:
@z

@x
.. code-block:: bash
@y
.. code-block:: bash
@z

@x
    python3 -m pip install --index-url https://test.pypi.org/simple/ --no-deps example-pkg-YOUR-USERNAME-HERE
@y
    python3 -m pip install --index-url https://test.pypi.org/simple/ --no-deps example-pkg-YOUR-USERNAME-HERE
@z

@x
Make sure to specify your username in the package name!
@y
Make sure to specify your username in the package name!
@z

@x
pip should install the package from Test PyPI and the output should look
something like this:
@y
pip should install the package from Test PyPI and the output should look
something like this:
@z

@x
.. code-block:: text
@y
.. code-block:: text
@z

@x
    Collecting example-pkg-YOUR-USERNAME-HERE
      Downloading https://test-files.pythonhosted.org/packages/.../example-pkg-YOUR-USERNAME-HERE-0.0.1-py3-none-any.whl
    Installing collected packages: example-pkg-YOUR-USERNAME-HERE
    Successfully installed example-pkg-YOUR-USERNAME-HERE-0.0.1
@y
    Collecting example-pkg-YOUR-USERNAME-HERE
      Downloading https://test-files.pythonhosted.org/packages/.../example-pkg-YOUR-USERNAME-HERE-0.0.1-py3-none-any.whl
    Installing collected packages: example-pkg-YOUR-USERNAME-HERE
    Successfully installed example-pkg-YOUR-USERNAME-HERE-0.0.1
@z

@x
.. note:: This example uses ``--index-url`` flag to specify TestPyPI instead of
   live PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI doesn't
   have the same packages as the live PyPI, it's possible that attempting to
   install dependencies may fail or install something unexpected. While our
   example package doesn't have any dependencies, it's a good practice to avoid
   installing dependencies when using TestPyPI.
@y
.. note:: This example uses ``--index-url`` flag to specify TestPyPI instead of
   live PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI doesn't
   have the same packages as the live PyPI, it's possible that attempting to
   install dependencies may fail or install something unexpected. While our
   example package doesn't have any dependencies, it's a good practice to avoid
   installing dependencies when using TestPyPI.
@z

@x
You can test that it was installed correctly by importing the package.
Run the Python interpreter (make sure you're still in your virtualenv):
@y
You can test that it was installed correctly by importing the package.
Run the Python interpreter (make sure you're still in your virtualenv):
@z

@x
.. code-block:: bash
@y
.. code-block:: bash
@z

@x
    python
@y
    python
@z

@x
and from the interpreter shell import the package:
@y
and from the interpreter shell import the package:
@z

@x
.. code-block:: python
@y
.. code-block:: python
@z

@x
    >>> import example_pkg
@y
    >>> import example_pkg
@z

@x
Note that the :term:`Import Package` is ``example_pkg`` regardless of what
name you gave your :term:`Distribution Package`
in :file:`setup.py` (in this case, ``example-pkg-YOUR-USERNAME-HERE``).
@y
Note that the :term:`Import Package` is ``example_pkg`` regardless of what
name you gave your :term:`Distribution Package`
in :file:`setup.py` (in this case, ``example-pkg-YOUR-USERNAME-HERE``).
@z

@x
Next steps
----------
@y
Next steps
----------
@z

@x
**Congratulations, you've packaged and distributed a Python project!**
✨ 🍰 ✨
@y
**Congratulations, you've packaged and distributed a Python project!**
✨ 🍰 ✨
@z

@x
Keep in mind that this tutorial showed you how to upload your package to Test
PyPI, which isn't a permanent storage. The Test system occasionally deletes
packages and accounts. It is best to use Test PyPI for testing and experiments
like this tutorial.
@y
Keep in mind that this tutorial showed you how to upload your package to Test
PyPI, which isn't a permanent storage. The Test system occasionally deletes
packages and accounts. It is best to use Test PyPI for testing and experiments
like this tutorial.
@z

@x
When you are ready to upload a real package to the Python Package Index you can
do much the same as you did in this tutorial, but with these important
differences:
@y
When you are ready to upload a real package to the Python Package Index you can
do much the same as you did in this tutorial, but with these important
differences:
@z

@x
* Choose a memorable and unique name for your package. You don't have to append
  your username as you did in the tutorial.
* Register an account on https://pypi.org - note that these are two separate
  servers and the login details from the test server are not shared with the
  main server.
* Use ``twine upload dist/*`` to upload your package and enter your credentials
  for the account you registered on the real PyPI.  Now that you're uploading
  the package in production, you don't need to specify ``--repository``; the
  package will upload to https://pypi.org/ by default.
* Install your package from the real PyPI using ``python3 -m pip install [your-package]``.
@y
* Choose a memorable and unique name for your package. You don't have to append
  your username as you did in the tutorial.
* Register an account on https://pypi.org - note that these are two separate
  servers and the login details from the test server are not shared with the
  main server.
* Use ``twine upload dist/*`` to upload your package and enter your credentials
  for the account you registered on the real PyPI.  Now that you're uploading
  the package in production, you don't need to specify ``--repository``; the
  package will upload to https://pypi.org/ by default.
* Install your package from the real PyPI using ``python3 -m pip install [your-package]``.
@z

@x
At this point if you want to read more on packaging Python libraries here are
some things you can do:
@y
At this point if you want to read more on packaging Python libraries here are
some things you can do:
@z

@x
* Read more about using :ref:`setuptools` to package libraries in
  :doc:`/guides/distributing-packages-using-setuptools`.
* Read about :doc:`/guides/packaging-binary-extensions`.
* Consider alternatives to :ref:`setuptools` such as :ref:`flit`, `hatch`_,
  and `poetry`_.
@y
* Read more about using :ref:`setuptools` to package libraries in
  :doc:`/guides/distributing-packages-using-setuptools`.
* Read about :doc:`/guides/packaging-binary-extensions`.
* Consider alternatives to :ref:`setuptools` such as :ref:`flit`, `hatch`_,
  and `poetry`_.
@z

@x
.. _hatch: https://github.com/ofek/hatch
.. _poetry: https://python-poetry.org
@y
.. _hatch: https://github.com/ofek/hatch
.. _poetry: https://python-poetry.org
@z
