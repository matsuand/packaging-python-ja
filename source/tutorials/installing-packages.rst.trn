@x
.. _installing-packages:
@y
.. _installing-packages:
@z

@x
===================
Installing Packages
===================
@y
========================
パッケージのインストール
========================
@z

@x
This section covers the basics of how to install Python :term:`packages
<Distribution Package>`.
@y
この節では Python :term:`パッケージ <Distribution Package>` インストールの基本を説明します。
@z

@x
It's important to note that the term "package" in this context is being used to
describe a bundle of software to be installed (i.e. as a synonym for a
:term:`distribution <Distribution Package>`). It does not to refer to the kind
of :term:`package <Import Package>` that you import in your Python source code
(i.e. a container of modules). It is common in the Python community to refer to
a :term:`distribution <Distribution Package>` using the term "package".  Using
the term "distribution" is often not preferred, because it can easily be
confused with a Linux distribution, or another larger software distribution
like Python itself.
@y
It's important to note that the term "package" in this context is being used to
describe a bundle of software to be installed (i.e. as a synonym for a
:term:`distribution <Distribution Package>`). It does not to refer to the kind
of :term:`package <Import Package>` that you import in your Python source code
(i.e. a container of modules). It is common in the Python community to refer to
a :term:`distribution <Distribution Package>` using the term "package".  Using
the term "distribution" is often not preferred, because it can easily be
confused with a Linux distribution, or another larger software distribution
like Python itself.
@z

@x
.. contents:: Contents
   :local:
@y
.. contents:: もくじ
   :local:
@z

@x
.. _installing_requirements:
@y
.. _installing_requirements:
@z

@x
Requirements for Installing Packages
====================================
@y
パッケージインストールの前提条件
================================
@z

@x
This section describes the steps to follow before installing other Python
packages.
@y
この節では、Python パッケージをインストールする前に行う手順について説明します。
@z

@x
Ensure you can run Python from the command line
-----------------------------------------------
@y
コマンドラインからの Python 実行確認
------------------------------------
@z

@x
Before you go any further, make sure you have Python and that the expected
version is available from your command line. You can check this by running:
@y
これより先に進むには Python がインストールされていて、期待するバージョンがコマンドラインから実行可能であることが必要です。
以下を実行して確認を行います。
@z

@x
.. code-block:: bash
@y
.. code-block:: bash
@z

@x
    python --version
@y
    python --version
@z

@x
You should get some output like ``Python 3.6.3``. If you do not have Python,
please install the latest 3.x version from `python.org`_ or refer to the
`Installing Python`_ section of the Hitchhiker's Guide to Python.
@y
``Python 3.6.3`` のような結果が得られるはずです。
Python がない場合は、`python.org`_ から最新のバージョン 3.x をインストールします。
あるいは Hitchhiker's Guide to Python の `Installing Python`_ の節を参照してください。
@z

@x
.. Note:: If you're a newcomer and you get an error like this:
@y
.. Note:: 初心者の方が以下のようなエラーになることがあります。
@z

@x
    .. code-block:: python
@y
    .. code-block:: python
@z

@x
        >>> python --version
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        NameError: name 'python' is not defined
@y
        >>> python --version
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        NameError: name 'python' is not defined
@z

@x
    It's because this command and other suggested commands in this tutorial
    are intended to be run in a *shell* (also called a *terminal* or
    *console*). See the Python for Beginners `getting started tutorial`_ for
    an introduction to using your operating system's shell and interacting with
    Python.
@y
    It's because this command and other suggested commands in this tutorial
    are intended to be run in a *shell* (also called a *terminal* or
    *console*). See the Python for Beginners `getting started tutorial`_ for
    an introduction to using your operating system's shell and interacting with
    Python.
@z

@x
.. Note:: If you're using an enhanced shell like IPython or the Jupyter
   notebook, you can run system commands like those in this tutorial by
   prefacing them with a ``!`` character:
@y
.. Note:: If you're using an enhanced shell like IPython or the Jupyter
   notebook, you can run system commands like those in this tutorial by
   prefacing them with a ``!`` character:
@z

@x
    ::
@y
    ::
@z

@x
        In [1]: import sys
                !{sys.executable} --version
        Python 3.6.3
@y
        In [1]: import sys
                !{sys.executable} --version
        Python 3.6.3
@z

@x
   It's recommended to write ``{sys.executable}`` rather than plain ``python`` in
   order to ensure that commands are run in the Python installation matching
   the currently running notebook (which may not be the same Python
   installation that the ``python`` command refers to).
@y
   It's recommended to write ``{sys.executable}`` rather than plain ``python`` in
   order to ensure that commands are run in the Python installation matching
   the currently running notebook (which may not be the same Python
   installation that the ``python`` command refers to).
@z

@x
.. Note:: Due to the way most Linux distributions are handling the Python 3
   migration, Linux users using the system Python without creating a virtual
   environment first should replace the ``python`` command in this tutorial
   with ``python3`` and the ``pip`` command with ``pip3 --user``. Do *not*
   run any of the commands in this tutorial with ``sudo``: if you get a
   permissions error, come back to the section on creating virtual environments,
   set one up, and then continue with the tutorial as written.
@y
.. Note:: Due to the way most Linux distributions are handling the Python 3
   migration, Linux users using the system Python without creating a virtual
   environment first should replace the ``python`` command in this tutorial
   with ``python3`` and the ``pip`` command with ``pip3 --user``. Do *not*
   run any of the commands in this tutorial with ``sudo``: if you get a
   permissions error, come back to the section on creating virtual environments,
   set one up, and then continue with the tutorial as written.
@z

@x
.. _getting started tutorial: https://opentechschool.github.io/python-beginners/en/getting_started.html#what-is-python-exactly
.. _python.org: https://python.org
@y
.. _getting started tutorial: https://opentechschool.github.io/python-beginners/en/getting_started.html#what-is-python-exactly
.. _python.org: https://python.org
@z

@x
Ensure you can run pip from the command line
--------------------------------------------
@y
コマンドラインからの pip 実行確認
---------------------------------
@z

@x
Additionally, you'll need to make sure you have :ref:`pip` available. You can
check this by running:
@y
上に加えて :ref:`pip` が利用可能である必要があります。
以下を実行してこれを確認します。
@z

@x
.. code-block:: bash
@y
.. code-block:: bash
@z

@x
    pip --version
@y
    pip --version
@z

@x
If you installed Python from source, with an installer from `python.org`_, or
via `Homebrew`_ you should already have pip. If you're on Linux and installed
using your OS package manager, you may have to install pip separately, see
:doc:`/guides/installing-using-linux-tools`.
@y
Python をソースコードからビルドし、そのインストールに `python.org`_ のインストーラーを利用している場合や `Homebrew`_ を利用している場合は、すでに pip がインストールされているはずです。
Linux 上において OS のパッケージマネージャーを利用してインストールを行っている場合は、pip を個別にインストールする必要があるかもしません。
:doc:`/guides/installing-using-linux-tools` を参照してください。
@z

@x
.. _Homebrew: https://brew.sh
.. _Installing Python: http://docs.python-guide.org/en/latest/starting/installation/
@y
.. _Homebrew: https://brew.sh
.. _Installing Python: http://docs.python-guide.org/en/latest/starting/installation/
@z

@x
If ``pip`` isn't already installed, then first try to bootstrap it from the
standard library:
@y
``pip`` をまだインストールしていない場合は、標準ライブラリからブートストラップによるインストールを行ってください。
@z

@x
.. code-block:: bash
@y
.. code-block:: bash
@z

@x
    python -m ensurepip --default-pip
@y
    python -m ensurepip --default-pip
@z

@x
If that still doesn't allow you to run ``pip``:
@y
それでも ``pip`` が実行できない場合は、以下に従ってください。
@z

@x
 * Securely Download `get-pip.py
   <https://bootstrap.pypa.io/get-pip.py>`_ [1]_
@y
 * Securely Download `get-pip.py
   <https://bootstrap.pypa.io/get-pip.py>`_ [1]_
@z

@x
 * Run ``python get-pip.py``. [2]_  This will install or upgrade pip.
   Additionally, it will install :ref:`setuptools` and :ref:`wheel` if they're
   not installed already.
@y
 * Run ``python get-pip.py``. [2]_  This will install or upgrade pip.
   Additionally, it will install :ref:`setuptools` and :ref:`wheel` if they're
   not installed already.
@z

@x
   .. warning::
@y
   .. warning::
@z

@x
      Be cautious if you're using a Python install that's managed by your
      operating system or another package manager. get-pip.py does not
      coordinate with those tools, and may leave your system in an
      inconsistent state. You can use ``python get-pip.py --prefix=/usr/local/``
      to install in ``/usr/local`` which is designed for locally-installed
      software.
@y
      Be cautious if you're using a Python install that's managed by your
      operating system or another package manager. get-pip.py does not
      coordinate with those tools, and may leave your system in an
      inconsistent state. You can use ``python get-pip.py --prefix=/usr/local/``
      to install in ``/usr/local`` which is designed for locally-installed
      software.
@z

@x
Ensure pip, setuptools, and wheel are up to date
------------------------------------------------
@y
pip、setuptools、wheel の最新確認
---------------------------------
@z

@x
While ``pip`` alone is sufficient to install from pre-built binary archives,
up to date copies of the ``setuptools`` and ``wheel`` projects are useful
to ensure you can also install from source archives::
@y
While ``pip`` alone is sufficient to install from pre-built binary archives,
up to date copies of the ``setuptools`` and ``wheel`` projects are useful
to ensure you can also install from source archives::
@z

@x
    python -m pip install --upgrade pip setuptools wheel
@y
    python -m pip install --upgrade pip setuptools wheel
@z

@x
Optionally, create a virtual environment
----------------------------------------
@y
Optionally, create a virtual environment
----------------------------------------
@z

@x
See :ref:`section below <Creating and using Virtual Environments>` for details,
but here's the basic `venv`_ [3]_ command to use on a typical Linux system:
@y
See :ref:`section below <Creating and using Virtual Environments>` for details,
but here's the basic `venv`_ [3]_ command to use on a typical Linux system:
@z

@x
.. code-block:: bash
@y
.. code-block:: bash
@z

@x
    python3 -m venv tutorial_env
    source tutorial_env/bin/activate
@y
    python3 -m venv tutorial_env
    source tutorial_env/bin/activate
@z

@x
This will create a new virtual environment in the ``tutorial_env`` subdirectory,
and configure the current shell to use it as the default ``python`` environment.
@y
This will create a new virtual environment in the ``tutorial_env`` subdirectory,
and configure the current shell to use it as the default ``python`` environment.
@z

@x
.. _`Creating and using Virtual Environments`:
@y
.. _`Creating and using Virtual Environments`:
@z

@x
Creating Virtual Environments
=============================
@y
Creating Virtual Environments
=============================
@z

@x
Python "Virtual Environments" allow Python :term:`packages <Distribution
Package>` to be installed in an isolated location for a particular application,
rather than being installed globally. If you are looking to safely install
global command line tools,
see :doc:`/guides/installing-stand-alone-command-line-tools`.
@y
Python "Virtual Environments" allow Python :term:`packages <Distribution
Package>` to be installed in an isolated location for a particular application,
rather than being installed globally. If you are looking to safely install
global command line tools,
see :doc:`/guides/installing-stand-alone-command-line-tools`.
@z

@x
Imagine you have an application that needs version 1 of LibFoo, but another
application requires version 2. How can you use both these applications? If you
install everything into /usr/lib/python3.6/site-packages (or whatever your
platform’s standard location is), it’s easy to end up in a situation where you
unintentionally upgrade an application that shouldn’t be upgraded.
@y
Imagine you have an application that needs version 1 of LibFoo, but another
application requires version 2. How can you use both these applications? If you
install everything into /usr/lib/python3.6/site-packages (or whatever your
platform’s standard location is), it’s easy to end up in a situation where you
unintentionally upgrade an application that shouldn’t be upgraded.
@z

@x
Or more generally, what if you want to install an application and leave it be?
If an application works, any change in its libraries or the versions of those
libraries can break the application.
@y
Or more generally, what if you want to install an application and leave it be?
If an application works, any change in its libraries or the versions of those
libraries can break the application.
@z

@x
Also, what if you can’t install :term:`packages <Distribution Package>` into the
global site-packages directory? For instance, on a shared host.
@y
Also, what if you can’t install :term:`packages <Distribution Package>` into the
global site-packages directory? For instance, on a shared host.
@z

@x
In all these cases, virtual environments can help you. They have their own
installation directories and they don’t share libraries with other virtual
environments.
@y
In all these cases, virtual environments can help you. They have their own
installation directories and they don’t share libraries with other virtual
environments.
@z

@x
Currently, there are two common tools for creating Python virtual environments:
@y
Currently, there are two common tools for creating Python virtual environments:
@z

@x
* `venv`_ is available by default in Python 3.3 and later, and installs
  :ref:`pip` and :ref:`setuptools` into created virtual environments in
  Python 3.4 and later.
* :ref:`virtualenv` needs to be installed separately, but supports Python 2.7+
  and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` are
  always installed into created virtual environments by default (regardless of
  Python version).
@y
* `venv`_ is available by default in Python 3.3 and later, and installs
  :ref:`pip` and :ref:`setuptools` into created virtual environments in
  Python 3.4 and later.
* :ref:`virtualenv` needs to be installed separately, but supports Python 2.7+
  and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` are
  always installed into created virtual environments by default (regardless of
  Python version).
@z

@x
The basic usage is like so:
@y
The basic usage is like so:
@z

@x
Using `venv`_:
@y
Using `venv`_:
@z

@x
::
@y
::
@z

@x
 python3 -m venv <DIR>
 source <DIR>/bin/activate
@y
 python3 -m venv <DIR>
 source <DIR>/bin/activate
@z

@x
Using :ref:`virtualenv`:
@y
Using :ref:`virtualenv`:
@z

@x
::
@y
::
@z

@x
 virtualenv <DIR>
 source <DIR>/bin/activate
@y
 virtualenv <DIR>
 source <DIR>/bin/activate
@z

@x
For more information, see the `venv`_ docs or the `virtualenv <http://virtualenv.pypa.io>`_ docs.
@y
For more information, see the `venv`_ docs or the `virtualenv <http://virtualenv.pypa.io>`_ docs.
@z

@x
The use of :command:`source` under Unix shells ensures
that the virtual environment's variables are set within the current
shell, and not in a subprocess (which then disappears, having no
useful effect).
@y
The use of :command:`source` under Unix shells ensures
that the virtual environment's variables are set within the current
shell, and not in a subprocess (which then disappears, having no
useful effect).
@z

@x
In both of the above cases, Windows users should _not_ use the
:command:`source` command, but should rather run the :command:`activate`
script directly from the command shell like so:
@y
In both of the above cases, Windows users should _not_ use the
:command:`source` command, but should rather run the :command:`activate`
script directly from the command shell like so:
@z

@x
::
@y
::
@z

@x
 <DIR>\Scripts\activate
@y
 <DIR>\Scripts\activate
@z

@x
Managing multiple virtual environments directly can become tedious, so the
:ref:`dependency management tutorial <managing-dependencies>` introduces a
higher level tool, :ref:`Pipenv`, that automatically manages a separate
virtual environment for each project and application that you work on.
@y
Managing multiple virtual environments directly can become tedious, so the
:ref:`dependency management tutorial <managing-dependencies>` introduces a
higher level tool, :ref:`Pipenv`, that automatically manages a separate
virtual environment for each project and application that you work on.
@z

@x
Use pip for Installing
======================
@y
Use pip for Installing
======================
@z

@x
:ref:`pip` is the recommended installer.  Below, we'll cover the most common
usage scenarios. For more detail, see the `pip docs <https://pip.pypa.io>`_,
which includes a complete `Reference Guide
<https://pip.pypa.io/en/latest/reference/index.html>`_.
@y
:ref:`pip` is the recommended installer.  Below, we'll cover the most common
usage scenarios. For more detail, see the `pip docs <https://pip.pypa.io>`_,
which includes a complete `Reference Guide
<https://pip.pypa.io/en/latest/reference/index.html>`_.
@z

@x
Installing from PyPI
====================
@y
Installing from PyPI
====================
@z

@x
The most common usage of :ref:`pip` is to install from the :term:`Python Package
Index <Python Package Index (PyPI)>` using a :term:`requirement specifier
<Requirement Specifier>`. Generally speaking, a requirement specifier is
composed of a project name followed by an optional :term:`version specifier
<Version Specifier>`.  :pep:`440` contains a :pep:`full
specification <440#version-specifiers>`
of the currently supported specifiers. Below are some examples.
@y
The most common usage of :ref:`pip` is to install from the :term:`Python Package
Index <Python Package Index (PyPI)>` using a :term:`requirement specifier
<Requirement Specifier>`. Generally speaking, a requirement specifier is
composed of a project name followed by an optional :term:`version specifier
<Version Specifier>`.  :pep:`440` contains a :pep:`full
specification <440#version-specifiers>`
of the currently supported specifiers. Below are some examples.
@z

@x
To install the latest version of "SomeProject":
@y
To install the latest version of "SomeProject":
@z

@x
::
@y
::
@z

@x
 pip install "SomeProject"
@y
 pip install "SomeProject"
@z

@x
To install a specific version:
@y
To install a specific version:
@z

@x
::
@y
::
@z

@x
 pip install "SomeProject==1.4"
@y
 pip install "SomeProject==1.4"
@z

@x
To install greater than or equal to one version and less than another:
@y
To install greater than or equal to one version and less than another:
@z

@x
::
@y
::
@z

@x
 pip install "SomeProject>=1,<2"
@y
 pip install "SomeProject>=1,<2"
@z

@x
To install a version that's :pep:`"compatible" <440#compatible-release>`
with a certain version: [4]_
@y
To install a version that's :pep:`"compatible" <440#compatible-release>`
with a certain version: [4]_
@z

@x
::
@y
::
@z

@x
 pip install "SomeProject~=1.4.2"
@y
 pip install "SomeProject~=1.4.2"
@z

@x
In this case, this means to install any version "==1.4.*" version that's also
">=1.4.2".
@y
In this case, this means to install any version "==1.4.*" version that's also
">=1.4.2".
@z

@x
Source Distributions vs Wheels
==============================
@y
Source Distributions vs Wheels
==============================
@z

@x
:ref:`pip` can install from either :term:`Source Distributions (sdist) <Source
Distribution (or "sdist")>` or :term:`Wheels <Wheel>`, but if both are present
on PyPI, pip will prefer a compatible :term:`wheel <Wheel>`.
@y
:ref:`pip` can install from either :term:`Source Distributions (sdist) <Source
Distribution (or "sdist")>` or :term:`Wheels <Wheel>`, but if both are present
on PyPI, pip will prefer a compatible :term:`wheel <Wheel>`.
@z

@x
:term:`Wheels <Wheel>` are a pre-built :term:`distribution <Distribution
Package>` format that provides faster installation compared to :term:`Source
Distributions (sdist) <Source Distribution (or "sdist")>`, especially when a
project contains compiled extensions.
@y
:term:`Wheels <Wheel>` are a pre-built :term:`distribution <Distribution
Package>` format that provides faster installation compared to :term:`Source
Distributions (sdist) <Source Distribution (or "sdist")>`, especially when a
project contains compiled extensions.
@z

@x
If :ref:`pip` does not find a wheel to install, it will locally build a wheel
and cache it for future installs, instead of rebuilding the source distribution
in the future.
@y
If :ref:`pip` does not find a wheel to install, it will locally build a wheel
and cache it for future installs, instead of rebuilding the source distribution
in the future.
@z

@x
Upgrading packages
==================
@y
Upgrading packages
==================
@z

@x
Upgrade an already installed ``SomeProject`` to the latest from PyPI.
@y
Upgrade an already installed ``SomeProject`` to the latest from PyPI.
@z

@x
::
@y
::
@z

@x
 pip install --upgrade SomeProject
@y
 pip install --upgrade SomeProject
@z

@x
.. _`Installing to the User Site`:
@y
.. _`Installing to the User Site`:
@z

@x
Installing to the User Site
===========================
@y
Installing to the User Site
===========================
@z

@x
To install :term:`packages <Distribution Package>` that are isolated to the
current user, use the ``--user`` flag:
@y
To install :term:`packages <Distribution Package>` that are isolated to the
current user, use the ``--user`` flag:
@z

@x
::
@y
::
@z

@x
  pip install --user SomeProject
@y
  pip install --user SomeProject
@z

@x
For more information see the `User Installs
<https://pip.readthedocs.io/en/latest/user_guide.html#user-installs>`_ section
from the pip docs.
@y
For more information see the `User Installs
<https://pip.readthedocs.io/en/latest/user_guide.html#user-installs>`_ section
from the pip docs.
@z

@x
Note that the ``--user`` flag has no effect when inside a virtual environment
- all installation commands will affect the virtual environment.
@y
Note that the ``--user`` flag has no effect when inside a virtual environment
- all installation commands will affect the virtual environment.
@z

@x
If ``SomeProject`` defines any command-line scripts or console entry points,
``--user`` will cause them to be installed inside the `user base`_'s binary
directory, which may or may not already be present in your shell's
:envvar:`PATH`.  (Starting in version 10, pip displays a warning when
installing any scripts to a directory outside :envvar:`PATH`.)  If the scripts
are not available in your shell after installation, you'll need to add the
directory to your :envvar:`PATH`:
@y
If ``SomeProject`` defines any command-line scripts or console entry points,
``--user`` will cause them to be installed inside the `user base`_'s binary
directory, which may or may not already be present in your shell's
:envvar:`PATH`.  (Starting in version 10, pip displays a warning when
installing any scripts to a directory outside :envvar:`PATH`.)  If the scripts
are not available in your shell after installation, you'll need to add the
directory to your :envvar:`PATH`:
@z

@x
- On Linux and macOS you can find the user base binary directory by running
  ``python -m site --user-base`` and adding ``bin`` to the end. For example,
  this will typically print ``~/.local`` (with ``~`` expanded to the absolute
  path to your home directory) so you'll need to add ``~/.local/bin`` to your
  ``PATH``.  You can set your ``PATH`` permanently by `modifying ~/.profile`_.
@y
- On Linux and macOS you can find the user base binary directory by running
  ``python -m site --user-base`` and adding ``bin`` to the end. For example,
  this will typically print ``~/.local`` (with ``~`` expanded to the absolute
  path to your home directory) so you'll need to add ``~/.local/bin`` to your
  ``PATH``.  You can set your ``PATH`` permanently by `modifying ~/.profile`_.
@z

@x
- On Windows you can find the user base binary directory by running ``py -m
  site --user-site`` and replacing ``site-packages`` with ``Scripts``. For
  example, this could return
  ``C:\Users\Username\AppData\Roaming\Python36\site-packages`` so you would
  need to set your ``PATH`` to include
  ``C:\Users\Username\AppData\Roaming\Python36\Scripts``. You can set your user
  ``PATH`` permanently in the `Control Panel`_. You may need to log out for the
  ``PATH`` changes to take effect.
@y
- On Windows you can find the user base binary directory by running ``py -m
  site --user-site`` and replacing ``site-packages`` with ``Scripts``. For
  example, this could return
  ``C:\Users\Username\AppData\Roaming\Python36\site-packages`` so you would
  need to set your ``PATH`` to include
  ``C:\Users\Username\AppData\Roaming\Python36\Scripts``. You can set your user
  ``PATH`` permanently in the `Control Panel`_. You may need to log out for the
  ``PATH`` changes to take effect.
@z

@x
.. _user base: https://docs.python.org/3/library/site.html#site.USER_BASE
.. _modifying ~/.profile: https://stackoverflow.com/a/14638025
.. _Control Panel: https://msdn.microsoft.com/en-us/library/windows/desktop/bb776899(v=vs.85).aspx
@y
.. _user base: https://docs.python.org/3/library/site.html#site.USER_BASE
.. _modifying ~/.profile: https://stackoverflow.com/a/14638025
.. _Control Panel: https://msdn.microsoft.com/en-us/library/windows/desktop/bb776899(v=vs.85).aspx
@z

@x
Requirements files
==================
@y
Requirements files
==================
@z

@x
Install a list of requirements specified in a :ref:`Requirements File
<pip:Requirements Files>`.
@y
Install a list of requirements specified in a :ref:`Requirements File
<pip:Requirements Files>`.
@z

@x
::
@y
::
@z

@x
 pip install -r requirements.txt
@y
 pip install -r requirements.txt
@z

@x
Installing from VCS
===================
@y
Installing from VCS
===================
@z

@x
Install a project from VCS in "editable" mode.  For a full breakdown of the
syntax, see pip's section on :ref:`VCS Support <pip:VCS Support>`.
@y
Install a project from VCS in "editable" mode.  For a full breakdown of the
syntax, see pip's section on :ref:`VCS Support <pip:VCS Support>`.
@z

@x
::
@y
::
@z

@x
 pip install -e git+https://git.repo/some_pkg.git#egg=SomeProject          # from git
 pip install -e hg+https://hg.repo/some_pkg#egg=SomeProject                # from mercurial
 pip install -e svn+svn://svn.repo/some_pkg/trunk/#egg=SomeProject         # from svn
 pip install -e git+https://git.repo/some_pkg.git@feature#egg=SomeProject  # from a branch
@y
 pip install -e git+https://git.repo/some_pkg.git#egg=SomeProject          # from git
 pip install -e hg+https://hg.repo/some_pkg#egg=SomeProject                # from mercurial
 pip install -e svn+svn://svn.repo/some_pkg/trunk/#egg=SomeProject         # from svn
 pip install -e git+https://git.repo/some_pkg.git@feature#egg=SomeProject  # from a branch
@z

@x
Installing from other Indexes
=============================
@y
Installing from other Indexes
=============================
@z

@x
Install from an alternate index
@y
Install from an alternate index
@z

@x
::
@y
::
@z

@x
 pip install --index-url http://my.package.repo/simple/ SomeProject
@y
 pip install --index-url http://my.package.repo/simple/ SomeProject
@z

@x
Search an additional index during install, in addition to :term:`PyPI <Python
Package Index (PyPI)>`
@y
Search an additional index during install, in addition to :term:`PyPI <Python
Package Index (PyPI)>`
@z

@x
::
@y
::
@z

@x
 pip install --extra-index-url http://my.package.repo/simple SomeProject
@y
 pip install --extra-index-url http://my.package.repo/simple SomeProject
@z

@x
Installing from a local src tree
================================
@y
Installing from a local src tree
================================
@z

@x
Installing from local src in `Development Mode
<https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_,
i.e. in such a way that the project appears to be installed, but yet is
still editable from the src tree.
@y
Installing from local src in `Development Mode
<https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_,
i.e. in such a way that the project appears to be installed, but yet is
still editable from the src tree.
@z

@x
::
@y
::
@z

@x
 pip install -e <path>
@y
 pip install -e <path>
@z

@x
You can also install normally from src
@y
You can also install normally from src
@z

@x
::
@y
::
@z

@x
 pip install <path>
@y
 pip install <path>
@z

@x
Installing from local archives
==============================
@y
Installing from local archives
==============================
@z

@x
Install a particular source archive file.
@y
Install a particular source archive file.
@z

@x
::
@y
::
@z

@x
 pip install ./downloads/SomeProject-1.0.4.tar.gz
@y
 pip install ./downloads/SomeProject-1.0.4.tar.gz
@z

@x
Install from a local directory containing archives (and don't check :term:`PyPI
<Python Package Index (PyPI)>`)
@y
Install from a local directory containing archives (and don't check :term:`PyPI
<Python Package Index (PyPI)>`)
@z

@x
::
@y
::
@z

@x
 pip install --no-index --find-links=file:///local/dir/ SomeProject
 pip install --no-index --find-links=/local/dir/ SomeProject
 pip install --no-index --find-links=relative/dir/ SomeProject
@y
 pip install --no-index --find-links=file:///local/dir/ SomeProject
 pip install --no-index --find-links=/local/dir/ SomeProject
 pip install --no-index --find-links=relative/dir/ SomeProject
@z

@x
Installing from other sources
=============================
@y
Installing from other sources
=============================
@z

@x
To install from other data sources (for example Amazon S3 storage) you can
create a helper application that presents the data in a :pep:`503` compliant
index format, and use the ``--extra-index-url`` flag to direct pip to use
that index.
@y
To install from other data sources (for example Amazon S3 storage) you can
create a helper application that presents the data in a :pep:`503` compliant
index format, and use the ``--extra-index-url`` flag to direct pip to use
that index.
@z

@x
::
@y
::
@z

@x
 ./s3helper --port=7777
 pip install --extra-index-url http://localhost:7777 SomeProject
@y
 ./s3helper --port=7777
 pip install --extra-index-url http://localhost:7777 SomeProject
@z

@x
Installing Prereleases
======================
@y
Installing Prereleases
======================
@z

@x
Find pre-release and development versions, in addition to stable versions.  By
default, pip only finds stable versions.
@y
Find pre-release and development versions, in addition to stable versions.  By
default, pip only finds stable versions.
@z

@x
::
@y
::
@z

@x
 pip install --pre SomeProject
@y
 pip install --pre SomeProject
@z

@x
Installing Setuptools "Extras"
==============================
@y
Installing Setuptools "Extras"
==============================
@z

@x
Install `setuptools extras`_.
@y
Install `setuptools extras`_.
@z

@x
::
@y
::
@z

@x
  $ pip install SomePackage[PDF]
  $ pip install SomePackage[PDF]==3.0
  $ pip install -e .[PDF]==3.0  # editable project in current directory
@y
  $ pip install SomePackage[PDF]
  $ pip install SomePackage[PDF]==3.0
  $ pip install -e .[PDF]==3.0  # editable project in current directory
@z

@x
----
@y
----
@z

@x
.. [1] "Secure" in this context means using a modern browser or a
       tool like :command:`curl` that verifies SSL certificates when
       downloading from https URLs.
@y
.. [1] "Secure" in this context means using a modern browser or a
       tool like :command:`curl` that verifies SSL certificates when
       downloading from https URLs.
@z

@x
.. [2] Depending on your platform, this may require root or Administrator
       access. :ref:`pip` is currently considering changing this by `making user
       installs the default behavior
       <https://github.com/pypa/pip/issues/1668>`_.
@y
.. [2] Depending on your platform, this may require root or Administrator
       access. :ref:`pip` is currently considering changing this by `making user
       installs the default behavior
       <https://github.com/pypa/pip/issues/1668>`_.
@z

@x
.. [3] Beginning with Python 3.4, ``venv`` (a stdlib alternative to
       :ref:`virtualenv`) will create virtualenv environments with ``pip``
       pre-installed, thereby making it an equal alternative to
       :ref:`virtualenv`.
@y
.. [3] Beginning with Python 3.4, ``venv`` (a stdlib alternative to
       :ref:`virtualenv`) will create virtualenv environments with ``pip``
       pre-installed, thereby making it an equal alternative to
       :ref:`virtualenv`.
@z

@x
.. [4] The compatible release specifier was accepted in :pep:`440`
       and support was released in :ref:`setuptools` v8.0 and
       :ref:`pip` v6.0
@y
.. [4] The compatible release specifier was accepted in :pep:`440`
       and support was released in :ref:`setuptools` v8.0 and
       :ref:`pip` v6.0
@z

@x
.. _venv: https://docs.python.org/3/library/venv.html
.. _setuptools extras: https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies
@y
.. _venv: https://docs.python.org/3/library/venv.html
.. _setuptools extras: https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies
@z
