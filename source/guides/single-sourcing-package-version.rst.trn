@x
.. _`Single sourcing the version`:
@y
.. _`Single sourcing the version`:
@z

@x
===================================
Single-sourcing the package version
===================================
@y
===================================
Single-sourcing the package version
===================================
@z

@x
There are many techniques to maintain a single source of truth for the version
number of your project:
@y
There are many techniques to maintain a single source of truth for the version
number of your project:
@z

@x
#.  Read the file in :file:`setup.py` and get the version. Example (from `pip setup.py
    <https://github.com/pypa/pip/blob/master/setup.py#L11>`_)::
@y
#.  Read the file in :file:`setup.py` and get the version. Example (from `pip setup.py
    <https://github.com/pypa/pip/blob/master/setup.py#L11>`_)::
@z

@x
        import codecs
        import os.path
@y
        import codecs
        import os.path
@z

@x
        def read(rel_path):
            here = os.path.abspath(os.path.dirname(__file__))
            with codecs.open(os.path.join(here, rel_path), 'r') as fp:
                return fp.read()
@y
        def read(rel_path):
            here = os.path.abspath(os.path.dirname(__file__))
            with codecs.open(os.path.join(here, rel_path), 'r') as fp:
                return fp.read()
@z

@x
        def get_version(rel_path):
            for line in read(rel_path).splitlines():
                if line.startswith('__version__'):
                    delim = '"' if '"' in line else "'"
                    return line.split(delim)[1]
            else:
                raise RuntimeError("Unable to find version string.")
@y
        def get_version(rel_path):
            for line in read(rel_path).splitlines():
                if line.startswith('__version__'):
                    delim = '"' if '"' in line else "'"
                    return line.split(delim)[1]
            else:
                raise RuntimeError("Unable to find version string.")
@z

@x
        setup(
           ...
           version=get_version("package/__init__.py")
           ...
        )
@y
        setup(
           ...
           version=get_version("package/__init__.py")
           ...
        )
@z

@x
    .. note::
@y
    .. note::
@z

@x
       As of the release of setuptools 46.4.0, one can accomplish the same
       thing by instead placing the following in the project's ``setup.cfg``
       file (replacing "package" with the import name of the package):
@y
       As of the release of setuptools 46.4.0, one can accomplish the same
       thing by instead placing the following in the project's ``setup.cfg``
       file (replacing "package" with the import name of the package):
@z

@x
       .. code-block:: ini
@y
       .. code-block:: ini
@z

@x
           [metadata]
           version = attr: package.__version__
@y
           [metadata]
           version = attr: package.__version__
@z

@x
       Earlier versions of setuptools implemented the ``attr:`` directive by
       importing the module, but setuptools 46.4.0 added rudimentary AST
       analysis so that ``attr:`` can function without having to import any of
       the package's dependencies.
@y
       Earlier versions of setuptools implemented the ``attr:`` directive by
       importing the module, but setuptools 46.4.0 added rudimentary AST
       analysis so that ``attr:`` can function without having to import any of
       the package's dependencies.
@z

@x
#.  Use an external build tool that either manages updating both locations, or
    offers an API that both locations can use.
@y
#.  Use an external build tool that either manages updating both locations, or
    offers an API that both locations can use.
@z

@x
    Few tools you could use, in no particular order, and not necessarily complete:
    `bump2version <https://pypi.org/project/bump2version>`_,
    `changes <https://pypi.org/project/changes>`_, `zest.releaser <https://pypi.org/project/zest.releaser>`_.
@y
    Few tools you could use, in no particular order, and not necessarily complete:
    `bump2version <https://pypi.org/project/bump2version>`_,
    `changes <https://pypi.org/project/changes>`_, `zest.releaser <https://pypi.org/project/zest.releaser>`_.
@z

@x
#.  Set the value to a ``__version__`` global variable in a dedicated module in
    your project (e.g. :file:`version.py`), then have :file:`setup.py` read and
    ``exec`` the value into a variable.
@y
#.  Set the value to a ``__version__`` global variable in a dedicated module in
    your project (e.g. :file:`version.py`), then have :file:`setup.py` read and
    ``exec`` the value into a variable.
@z

@x
    ::
@y
    ::
@z

@x
        version = {}
        with open("...sample/version.py") as fp:
            exec(fp.read(), version)
        # later on we use: version['__version__']
@y
        version = {}
        with open("...sample/version.py") as fp:
            exec(fp.read(), version)
        # later on we use: version['__version__']
@z

@x
    Example using this technique: `warehouse <https://github.com/pypa/warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/__about__.py>`_.
@y
    Example using this technique: `warehouse <https://github.com/pypa/warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/__about__.py>`_.
@z

@x
#.  Place the value in a simple ``VERSION`` text file and have both
    :file:`setup.py` and the project code read it.
@y
#.  Place the value in a simple ``VERSION`` text file and have both
    :file:`setup.py` and the project code read it.
@z

@x
    ::
@y
    ::
@z

@x
        with open(os.path.join(mypackage_root_dir, 'VERSION')) as version_file:
            version = version_file.read().strip()
@y
        with open(os.path.join(mypackage_root_dir, 'VERSION')) as version_file:
            version = version_file.read().strip()
@z

@x
    An advantage with this technique is that it's not specific to Python.  Any
    tool can read the version.
@y
    An advantage with this technique is that it's not specific to Python.  Any
    tool can read the version.
@z

@x
    .. warning::
@y
    .. warning::
@z

@x
        With this approach you must make sure that the ``VERSION`` file is included in
        all your source and binary distributions (e.g. add ``include VERSION`` to your
        :file:`MANIFEST.in`).
@y
        With this approach you must make sure that the ``VERSION`` file is included in
        all your source and binary distributions (e.g. add ``include VERSION`` to your
        :file:`MANIFEST.in`).
@z

@x
#.  Set the value in :file:`setup.py`, and have the project code use the
    ``importlib.metadata`` API to fetch the value at runtime.
    (``importlib.metadata`` was introduced in Python 3.8 and is available to
    older versions as the ``importlib-metadata`` project.)  An installed
    project's version can be fetched with the API as follows::
@y
#.  Set the value in :file:`setup.py`, and have the project code use the
    ``importlib.metadata`` API to fetch the value at runtime.
    (``importlib.metadata`` was introduced in Python 3.8 and is available to
    older versions as the ``importlib-metadata`` project.)  An installed
    project's version can be fetched with the API as follows::
@z

@x
        try:
            from importlib import metadata
        except ImportError:
            # Running on pre-3.8 Python; use importlib-metadata package
            import importlib_metadata as metadata
@y
        try:
            from importlib import metadata
        except ImportError:
            # Running on pre-3.8 Python; use importlib-metadata package
            import importlib_metadata as metadata
@z

@x
        assert metadata.version('pip') == '1.2.0'
@y
        assert metadata.version('pip') == '1.2.0'
@z

@x
    Be aware that the ``importlib.metadata`` API only knows about what's in the
    installation metadata, which is not necessarily the code that's currently
    imported.
@y
    Be aware that the ``importlib.metadata`` API only knows about what's in the
    installation metadata, which is not necessarily the code that's currently
    imported.
@z

@x
    If a project uses this method to fetch its version at runtime, then its
    ``install_requires`` value needs to be edited to install
    ``importlib-metadata`` on pre-3.8 versions of Python like so::
@y
    If a project uses this method to fetch its version at runtime, then its
    ``install_requires`` value needs to be edited to install
    ``importlib-metadata`` on pre-3.8 versions of Python like so::
@z

@x
        setup(
            ...
            install_requires=[
                ...
                'importlib-metadata ~= 1.0 ; python_version < "3.8"',
                ...
            ],
            ...
        )
@y
        setup(
            ...
            install_requires=[
                ...
                'importlib-metadata ~= 1.0 ; python_version < "3.8"',
                ...
            ],
            ...
        )
@z

@x
    An older (and less efficient) alternative to ``importlib.metadata`` is the
    ``pkg_resources`` API provided by ``setuptools``::
@y
    An older (and less efficient) alternative to ``importlib.metadata`` is the
    ``pkg_resources`` API provided by ``setuptools``::
@z

@x
        import pkg_resources
        assert pkg_resources.get_distribution('pip').version == '1.2.0'
@y
        import pkg_resources
        assert pkg_resources.get_distribution('pip').version == '1.2.0'
@z

@x
    If a project uses ``pkg_resources`` to fetch its own version at runtime,
    then ``setuptools`` must be added to the project's ``install_requires``
    list.
@y
    If a project uses ``pkg_resources`` to fetch its own version at runtime,
    then ``setuptools`` must be added to the project's ``install_requires``
    list.
@z

@x
    Example using this technique: `setuptools <https://github.com/pypa/setuptools/blob/master/setuptools/version.py>`_.
@y
    Example using this technique: `setuptools <https://github.com/pypa/setuptools/blob/master/setuptools/version.py>`_.
@z

@x
#.  Set the value to ``__version__`` in ``sample/__init__.py`` and import
    ``sample`` in :file:`setup.py`.
@y
#.  Set the value to ``__version__`` in ``sample/__init__.py`` and import
    ``sample`` in :file:`setup.py`.
@z

@x
    ::
@y
    ::
@z

@x
        import sample
        setup(
            ...
            version=sample.__version__
            ...
        )
@y
        import sample
        setup(
            ...
            version=sample.__version__
            ...
        )
@z

@x
    .. warning::
@y
    .. warning::
@z

@x
        Although this technique is common, beware that it will fail if
        ``sample/__init__.py`` imports packages from ``install_requires``
        dependencies, which will very likely not be installed yet when
        :file:`setup.py` is run.
@y
        Although this technique is common, beware that it will fail if
        ``sample/__init__.py`` imports packages from ``install_requires``
        dependencies, which will very likely not be installed yet when
        :file:`setup.py` is run.
@z

@x
#.  Keep the version number in the tags of a version control system (Git, Mercurial, etc)
    instead of in the code, and automatically extract it from there using
    `setuptools_scm <https://pypi.org/project/setuptools_scm>`_.
@y
#.  Keep the version number in the tags of a version control system (Git, Mercurial, etc)
    instead of in the code, and automatically extract it from there using
    `setuptools_scm <https://pypi.org/project/setuptools_scm>`_.
@z
