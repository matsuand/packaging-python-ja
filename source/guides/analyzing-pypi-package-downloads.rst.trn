@x
================================
Analyzing PyPI package downloads
================================
@y
================================
Analyzing PyPI package downloads
================================
@z

@x
This section covers how to use the public PyPI download statistics dataset
to learn more about downloads of a package (or packages) hosted on PyPI. For
example, you can use it to discover the distribution of Python versions used to
download a package.
@y
This section covers how to use the public PyPI download statistics dataset
to learn more about downloads of a package (or packages) hosted on PyPI. For
example, you can use it to discover the distribution of Python versions used to
download a package.
@z

@x
.. contents:: Contents
   :local:
@y
.. contents:: Contents
   :local:
@z

@x
Background
==========
@y
Background
==========
@z

@x
PyPI does not display download statistics for a number of reasons: [#]_
@y
PyPI does not display download statistics for a number of reasons: [#]_
@z

@x
- **Inefficient to make work with a Content Distribution Network (CDN):**
  Download statistics change constantly. Including them in project pages, which
  are heavily cached, would require invalidating the cache more often, and
  reduce the overall effectiveness of the cache.
@y
- **Inefficient to make work with a Content Distribution Network (CDN):**
  Download statistics change constantly. Including them in project pages, which
  are heavily cached, would require invalidating the cache more often, and
  reduce the overall effectiveness of the cache.
@z

@x
- **Highly inaccurate:** A number of things prevent the download counts from
  being accurate, some of which include:
@y
- **Highly inaccurate:** A number of things prevent the download counts from
  being accurate, some of which include:
@z

@x
  - ``pip``'s download cache (lowers download counts)
  - Internal or unofficial mirrors (can both raise or lower download counts)
  - Packages not hosted on PyPI (for comparisons sake)
  - Unofficial scripts or attempts at download count inflation (raises download
    counts)
  - Known historical data quality issues (lowers download counts)
@y
  - ``pip``'s download cache (lowers download counts)
  - Internal or unofficial mirrors (can both raise or lower download counts)
  - Packages not hosted on PyPI (for comparisons sake)
  - Unofficial scripts or attempts at download count inflation (raises download
    counts)
  - Known historical data quality issues (lowers download counts)
@z

@x
- **Not particularly useful:** Just because a project has been downloaded a lot
  doesn't mean it's good; Similarly just because a project hasn't been
  downloaded a lot doesn't mean it's bad!
@y
- **Not particularly useful:** Just because a project has been downloaded a lot
  doesn't mean it's good; Similarly just because a project hasn't been
  downloaded a lot doesn't mean it's bad!
@z

@x
In short, because it's value is low for various reasons, and the tradeoffs
required to make it work are high, it has been not an effective use of
limited resources.
@y
In short, because it's value is low for various reasons, and the tradeoffs
required to make it work are high, it has been not an effective use of
limited resources.
@z

@x
Public dataset
==============
@y
Public dataset
==============
@z

@x
As an alternative, the `Linehaul project <https://github.com/pypa/linehaul>`__
streams download logs from PyPI to `Google BigQuery`_ [#]_, where they are
stored as a public dataset.
@y
As an alternative, the `Linehaul project <https://github.com/pypa/linehaul>`__
streams download logs from PyPI to `Google BigQuery`_ [#]_, where they are
stored as a public dataset.
@z

@x
Getting set up
--------------
@y
Getting set up
--------------
@z

@x
In order to use `Google BigQuery`_ to query the `public PyPI download
statistics dataset`_, you'll need a Google account and to enable the BigQuery
API on a Google Cloud Platform project. You can run the up to 1TB of queries
per month `using the BigQuery free tier without a credit card
<https://cloud.google.com/blog/big-data/2017/01/how-to-run-a-terabyte-of-google-bigquery-queries-each-month-without-a-credit-card>`__
@y
In order to use `Google BigQuery`_ to query the `public PyPI download
statistics dataset`_, you'll need a Google account and to enable the BigQuery
API on a Google Cloud Platform project. You can run the up to 1TB of queries
per month `using the BigQuery free tier without a credit card
<https://cloud.google.com/blog/big-data/2017/01/how-to-run-a-terabyte-of-google-bigquery-queries-each-month-without-a-credit-card>`__
@z

@x
- Navigate to the `BigQuery web UI`_.
- Create a new project.
- Enable the `BigQuery API
  <https://console.developers.google.com/apis/library/bigquery-json.googleapis.com>`__.
@y
- Navigate to the `BigQuery web UI`_.
- Create a new project.
- Enable the `BigQuery API
  <https://console.developers.google.com/apis/library/bigquery-json.googleapis.com>`__.
@z

@x
For more detailed instructions on how to get started with BigQuery, check out
the `BigQuery quickstart guide
<https://cloud.google.com/bigquery/docs/quickstarts/quickstart-web-ui>`__.
@y
For more detailed instructions on how to get started with BigQuery, check out
the `BigQuery quickstart guide
<https://cloud.google.com/bigquery/docs/quickstarts/quickstart-web-ui>`__.
@z

@x
Data schema
-----------
@y
Data schema
-----------
@z

@x
Linehaul writes an entry in a ``bigquery-public-data.pypi.file_downloads`` table for each
download. The table contains information about what file was downloaded and how
it was downloaded. Some useful columns from the `table schema
<https://console.cloud.google.com/bigquery?pli=1&p=bigquery-public-data&d=pypi&t=file_downloads&page=table>`__
include:
@y
Linehaul writes an entry in a ``bigquery-public-data.pypi.file_downloads`` table for each
download. The table contains information about what file was downloaded and how
it was downloaded. Some useful columns from the `table schema
<https://console.cloud.google.com/bigquery?pli=1&p=bigquery-public-data&d=pypi&t=file_downloads&page=table>`__
include:
@z

@x
+------------------------+-----------------+-----------------------------+
| Column                 | Description     | Examples                    |
+========================+=================+=============================+
| timestamp              | Date and time   | ``2020-03-09 00:33:03 UTC`` |
+------------------------+-----------------+-----------------------------+
| file.project           | Project name    | ``pipenv``, ``nose``        |
+------------------------+-----------------+-----------------------------+
| file.version           | Package version | ``0.1.6``, ``1.4.2``        |
+------------------------+-----------------+-----------------------------+
| details.installer.name | Installer       | pip, `bandersnatch`_        |
+------------------------+-----------------+-----------------------------+
| details.python         | Python version  | ``2.7.12``, ``3.6.4``       |
+------------------------+-----------------+-----------------------------+
@y
+------------------------+-----------------+-----------------------------+
| Column                 | Description     | Examples                    |
+========================+=================+=============================+
| timestamp              | Date and time   | ``2020-03-09 00:33:03 UTC`` |
+------------------------+-----------------+-----------------------------+
| file.project           | Project name    | ``pipenv``, ``nose``        |
+------------------------+-----------------+-----------------------------+
| file.version           | Package version | ``0.1.6``, ``1.4.2``        |
+------------------------+-----------------+-----------------------------+
| details.installer.name | Installer       | pip, `bandersnatch`_        |
+------------------------+-----------------+-----------------------------+
| details.python         | Python version  | ``2.7.12``, ``3.6.4``       |
+------------------------+-----------------+-----------------------------+
@z

@x
Useful queries
--------------
@y
Useful queries
--------------
@z

@x
Run queries in the `BigQuery web UI`_ by clicking the "Compose query" button.
@y
Run queries in the `BigQuery web UI`_ by clicking the "Compose query" button.
@z

@x
Note that the rows are stored in a partitioned, which helps
limit the cost of queries. These example queries analyze downloads from
recent history by filtering on the ``timestamp`` column.
@y
Note that the rows are stored in a partitioned, which helps
limit the cost of queries. These example queries analyze downloads from
recent history by filtering on the ``timestamp`` column.
@z

@x
Counting package downloads
~~~~~~~~~~~~~~~~~~~~~~~~~~
@y
Counting package downloads
~~~~~~~~~~~~~~~~~~~~~~~~~~
@z

@x
The following query counts the total number of downloads for the project
"pytest".
@y
The following query counts the total number of downloads for the project
"pytest".
@z

@x
::
@y
::
@z

@x
    #standardSQL
    SELECT COUNT(*) AS num_downloads
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE file.project = 'pytest'
      -- Only query the last 30 days of history
      AND DATE(timestamp)
        BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
        AND CURRENT_DATE()
@y
    #standardSQL
    SELECT COUNT(*) AS num_downloads
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE file.project = 'pytest'
      -- Only query the last 30 days of history
      AND DATE(timestamp)
        BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
        AND CURRENT_DATE()
@z

@x
+---------------+
| num_downloads |
+===============+
| 26190085      |
+---------------+
@y
+---------------+
| num_downloads |
+===============+
| 26190085      |
+---------------+
@z

@x
To only count downloads from pip, filter on the ``details.installer.name``
column.
@y
To only count downloads from pip, filter on the ``details.installer.name``
column.
@z

@x
::
@y
::
@z

@x
    #standardSQL
    SELECT COUNT(*) AS num_downloads
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE file.project = 'pytest'
      AND details.installer.name = 'pip'
      -- Only query the last 30 days of history
      AND DATE(timestamp)
        BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
        AND CURRENT_DATE()
@y
    #standardSQL
    SELECT COUNT(*) AS num_downloads
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE file.project = 'pytest'
      AND details.installer.name = 'pip'
      -- Only query the last 30 days of history
      AND DATE(timestamp)
        BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
        AND CURRENT_DATE()
@z

@x
+---------------+
| num_downloads |
+===============+
| 24334215      |
+---------------+
@y
+---------------+
| num_downloads |
+===============+
| 24334215      |
+---------------+
@z

@x
Package downloads over time
~~~~~~~~~~~~~~~~~~~~~~~~~~~
@y
Package downloads over time
~~~~~~~~~~~~~~~~~~~~~~~~~~~
@z

@x
To group by monthly downloads, use the ``TIMESTAMP_TRUNC`` function. Also
filtering by this column reduces corresponding costs.
@y
To group by monthly downloads, use the ``TIMESTAMP_TRUNC`` function. Also
filtering by this column reduces corresponding costs.
@z

@x
::
@y
::
@z

@x
    #standardSQL
    SELECT
      COUNT(*) AS num_downloads,
      DATE_TRUNC(DATE(timestamp), MONTH) AS `month`
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE
      file.project = 'pytest'
      -- Only query the last 6 months of history
      AND DATE(timestamp)
        BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH), MONTH)
        AND CURRENT_DATE()
    GROUP BY `month`
    ORDER BY `month` DESC
@y
    #standardSQL
    SELECT
      COUNT(*) AS num_downloads,
      DATE_TRUNC(DATE(timestamp), MONTH) AS `month`
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE
      file.project = 'pytest'
      -- Only query the last 6 months of history
      AND DATE(timestamp)
        BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH), MONTH)
        AND CURRENT_DATE()
    GROUP BY `month`
    ORDER BY `month` DESC
@z

@x
+---------------+------------+
| num_downloads | month      |
+===============+============+
| 1956741       | 2018-01-01 |
+---------------+------------+
| 2344692       | 2017-12-01 |
+---------------+------------+
| 1730398       | 2017-11-01 |
+---------------+------------+
| 2047310       | 2017-10-01 |
+---------------+------------+
| 1744443       | 2017-09-01 |
+---------------+------------+
| 1916952       | 2017-08-01 |
+---------------+------------+
@y
+---------------+------------+
| num_downloads | month      |
+===============+============+
| 1956741       | 2018-01-01 |
+---------------+------------+
| 2344692       | 2017-12-01 |
+---------------+------------+
| 1730398       | 2017-11-01 |
+---------------+------------+
| 2047310       | 2017-10-01 |
+---------------+------------+
| 1744443       | 2017-09-01 |
+---------------+------------+
| 1916952       | 2017-08-01 |
+---------------+------------+
@z

@x
Python versions over time
~~~~~~~~~~~~~~~~~~~~~~~~~
@y
Python versions over time
~~~~~~~~~~~~~~~~~~~~~~~~~
@z

@x
Extract the Python version from the ``details.python`` column. Warning: This
query processes over 500 GB of data.
@y
Extract the Python version from the ``details.python`` column. Warning: This
query processes over 500 GB of data.
@z

@x
::
@y
::
@z

@x
    #standardSQL
    SELECT
      REGEXP_EXTRACT(details.python, r"[0-9]+\.[0-9]+") AS python_version,
      COUNT(*) AS num_downloads,
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE
      -- Only query the last 6 months of history
      DATE(timestamp)
        BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH), MONTH)
        AND CURRENT_DATE()
    GROUP BY `python_version`
    ORDER BY `num_downloads` DESC
@y
    #standardSQL
    SELECT
      REGEXP_EXTRACT(details.python, r"[0-9]+\.[0-9]+") AS python_version,
      COUNT(*) AS num_downloads,
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE
      -- Only query the last 6 months of history
      DATE(timestamp)
        BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH), MONTH)
        AND CURRENT_DATE()
    GROUP BY `python_version`
    ORDER BY `num_downloads` DESC
@z

@x
+--------+---------------+
| python | num_downloads |
+========+===============+
| 3.7    | 18051328726   |
+--------+---------------+
| 3.6    | 9635067203    |
+--------+---------------+
| 3.8    | 7781904681    |
+--------+---------------+
| 2.7    | 6381252241    |
+--------+---------------+
| null   | 2026630299    |
+--------+---------------+
| 3.5    | 1894153540    |
+--------+---------------+
@y
+--------+---------------+
| python | num_downloads |
+========+===============+
| 3.7    | 18051328726   |
+--------+---------------+
| 3.6    | 9635067203    |
+--------+---------------+
| 3.8    | 7781904681    |
+--------+---------------+
| 2.7    | 6381252241    |
+--------+---------------+
| null   | 2026630299    |
+--------+---------------+
| 3.5    | 1894153540    |
+--------+---------------+
@z

@x
Caveats
=======
@y
Caveats
=======
@z

@x
In addition to the caveats listed in the background above, Linehaul suffered
from a bug which caused it to significantly under-report download statistics
prior to July 26, 2018. Downloads before this date are proportionally accurate
(e.g. the percentage of Python 2 vs. Python 3 downloads) but total numbers are
lower than actual by an order of magnitude.
@y
In addition to the caveats listed in the background above, Linehaul suffered
from a bug which caused it to significantly under-report download statistics
prior to July 26, 2018. Downloads before this date are proportionally accurate
(e.g. the percentage of Python 2 vs. Python 3 downloads) but total numbers are
lower than actual by an order of magnitude.
@z

@x
Additional tools
================
@y
Additional tools
================
@z

@x
Besides using the BigQuery console, there are some additional tools which may
be useful when analyzing download statistics.
@y
Besides using the BigQuery console, there are some additional tools which may
be useful when analyzing download statistics.
@z

@x
``google-cloud-bigquery``
-------------------------
@y
``google-cloud-bigquery``
-------------------------
@z

@x
You can also access the public PyPI download statistics dataset
programmatically via the BigQuery API and the `google-cloud-bigquery`_ project,
the official Python client library for BigQuery.
@y
You can also access the public PyPI download statistics dataset
programmatically via the BigQuery API and the `google-cloud-bigquery`_ project,
the official Python client library for BigQuery.
@z

@x
.. code-block:: python
@y
.. code-block:: python
@z

@x
    from google.cloud import bigquery
@y
    from google.cloud import bigquery
@z

@x
    # Note: depending on where this code is being run, you may require
    # additional authentication. See:
    # https://cloud.google.com/bigquery/docs/authentication/
    client = bigquery.Client()
@y
    # Note: depending on where this code is being run, you may require
    # additional authentication. See:
    # https://cloud.google.com/bigquery/docs/authentication/
    client = bigquery.Client()
@z

@x
    query_job = client.query("""
    SELECT COUNT(*) AS num_downloads
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE file.project = 'pytest'
      -- Only query the last 30 days of history
      AND DATE(timestamp)
        BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
        AND CURRENT_DATE()""")
@y
    query_job = client.query("""
    SELECT COUNT(*) AS num_downloads
    FROM `bigquery-public-data.pypi.file_downloads`
    WHERE file.project = 'pytest'
      -- Only query the last 30 days of history
      AND DATE(timestamp)
        BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
        AND CURRENT_DATE()""")
@z

@x
    results = query_job.result()  # Waits for job to complete.
    for row in results:
        print("{} downloads".format(row.num_downloads))
@y
    results = query_job.result()  # Waits for job to complete.
    for row in results:
        print("{} downloads".format(row.num_downloads))
@z

@x
``pypinfo``
-----------
@y
``pypinfo``
-----------
@z

@x
`pypinfo`_ is a command-line tool which provides access to the dataset and
can generate several useful queries. For example, you can query the total
number of download for a package with the command ``pypinfo package_name``.
@y
`pypinfo`_ is a command-line tool which provides access to the dataset and
can generate several useful queries. For example, you can query the total
number of download for a package with the command ``pypinfo package_name``.
@z

@x
Install `pypinfo`_ using pip.
@y
Install `pypinfo`_ using pip.
@z

@x
::
@y
::
@z

@x
    python -m pip install pypinfo
@y
    python -m pip install pypinfo
@z

@x
Usage:
@y
Usage:
@z

@x
::
@y
::
@z

@x
    $ pypinfo requests
    Served from cache: False
    Data processed: 6.87 GiB
    Data billed: 6.87 GiB
    Estimated cost: $0.04
@y
    $ pypinfo requests
    Served from cache: False
    Data processed: 6.87 GiB
    Data billed: 6.87 GiB
    Estimated cost: $0.04
@z

@x
    | download_count |
    | -------------- |
    |      9,316,415 |
@y
    | download_count |
    | -------------- |
    |      9,316,415 |
@z

@x
``pandas-gbq``
--------------
@y
``pandas-gbq``
--------------
@z

@x
The `pandas-gbq`_ project allows for accessing query results via `Pandas`_.
@y
The `pandas-gbq`_ project allows for accessing query results via `Pandas`_.
@z

@x
References
==========
@y
References
==========
@z

@x
.. [#] `PyPI Download Counts deprecation email <https://mail.python.org/pipermail/distutils-sig/2013-May/020855.html>`__
.. [#] `PyPI BigQuery dataset announcement email <https://mail.python.org/pipermail/distutils-sig/2016-May/028986.html>`__
@y
.. [#] `PyPI Download Counts deprecation email <https://mail.python.org/pipermail/distutils-sig/2013-May/020855.html>`__
.. [#] `PyPI BigQuery dataset announcement email <https://mail.python.org/pipermail/distutils-sig/2016-May/028986.html>`__
@z

@x
.. _public PyPI download statistics dataset: https://console.cloud.google.com/bigquery?p=bigquery-public-data&d=pypi&page=dataset
.. _bandersnatch: /key_projects/#bandersnatch
.. _Google BigQuery: https://cloud.google.com/bigquery
.. _BigQuery web UI: https://console.cloud.google.com/bigquery
.. _pypinfo: https://github.com/ofek/pypinfo/blob/master/README.rst
.. _google-cloud-bigquery: https://cloud.google.com/bigquery/docs/reference/libraries
.. _pandas-gbq: https://pandas-gbq.readthedocs.io/en/latest/
.. _Pandas: https://pandas.pydata.org/
@y
.. _public PyPI download statistics dataset: https://console.cloud.google.com/bigquery?p=bigquery-public-data&d=pypi&page=dataset
.. _bandersnatch: /key_projects/#bandersnatch
.. _Google BigQuery: https://cloud.google.com/bigquery
.. _BigQuery web UI: https://console.cloud.google.com/bigquery
.. _pypinfo: https://github.com/ofek/pypinfo/blob/master/README.rst
.. _google-cloud-bigquery: https://cloud.google.com/bigquery/docs/reference/libraries
.. _pandas-gbq: https://pandas-gbq.readthedocs.io/en/latest/
.. _Pandas: https://pandas.pydata.org/
@z
